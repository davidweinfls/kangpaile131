structdef B{
float * y;
};
structdef A{
B* b;
};

A a;
B b;

function: void main(){

A * ap = &a;
B * bp = &b;

ap->b = bp;
new bp->y;
*(bp->y) = 8.6;

cout << *(bp->y) << endl;

//cout << ap->b->y << endl;	//address 588
//cout << bp->y << endl;	 //address 984
//cout << a.b->y << endl;	 //address 588

cout << *(ap->b->y) << endl;

delete bp->y;
}



///////////////////////////////////////////////////////////////////

// Struct arrays
structdef STR {
  int i;
  STR * next;
  float f;
  bool b;
};

function : void main()
{
  STR[3] strarr;
  int i = 0;
  while(i < 3)
  {
    strarr[i].i = i;
    strarr[i].f = i*i;
    strarr[i].b = true;

    strarr[i].next = &strarr[(i+1)%3];
    i++;
  }

  i = 0;
  while(i < 3)
  {
    cout << "Current Struct Info" << endl;
    cout << "i = " << i << " = " << strarr[i].i << endl;
    cout << "f = " << i*i << ".00 = " << strarr[i].f << endl;
    cout << "b = true = " << strarr[i].b << endl << endl;

    int n = (i+1)%3;
    cout << "Next Struct Info" << endl;
    cout << "i = "<< n << " = " << strarr[i].next->i << endl;
    cout << "f = " << n*n << ".00 = " << strarr[i].next->f << endl;
    cout << "b = true = " << strarr[i].next->b << endl << endl;
    i++;
  }
}

/////////////////////////////////////////////////////////////
structdef INTSTRUCT {
bool b; 
int x; 
INTSTRUCT* y;
};
structdef INTSTRUCTSTRUCT {
bool b; 
INTSTRUCT x;
};
typedef INTSTRUCTSTRUCT* INTSTRUCTSTRUCTPTR;
typedef INTSTRUCTSTRUCT STRUCT;
INTSTRUCTSTRUCTPTR[5] arr;
INTSTRUCTSTRUCT x;
function : void main () {
  STRUCT b;
  STRUCT d;
  INTSTRUCT theOnlyIntStruct;
  arr[1] = &b;

  arr[3] = &d;
  (*arr[1]).x.x = 3;
  (*arr[3]).x = theOnlyIntStruct;

  (*arr[3]).x.y = &((*arr[1]).x);
  x.x.x = 5;
  cout << ((arr[3])->x.y)->x << endl;

}